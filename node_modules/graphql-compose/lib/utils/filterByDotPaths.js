'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = filterByDotPaths;
exports.preparePathsFilter = preparePathsFilter;
exports.hideComplexValue = hideComplexValue;
exports.isPresentInDotFilter = isPresentInDotFilter;
exports.partialCloneSubpath = partialCloneSubpath;
exports.hideField = hideField;

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function filterByDotPaths(obj, pathsFilter, opts) {
  var result = void 0;

  var paths = preparePathsFilter(pathsFilter);
  if (paths) {
    result = {};
    paths.forEach(function (path) {
      result[path] = _objectPath2.default.get(obj, path);
    });
  } else {
    result = (0, _extends3.default)({}, obj);
  }

  if (opts && opts.hideFields) {
    var hiddenFields = [];
    Object.keys(opts.hideFields).forEach(function (key) {
      // $FlowFixMe
      var msg = opts.hideFields[key];
      hiddenFields.push.apply(hiddenFields, (0, _toConsumableArray3.default)(hideField(result, key, msg, pathsFilter)));
    });
    if (hiddenFields.length > 0 && opts.hideFieldsNote) {
      result['[debug note]'] = opts.hideFieldsNote.replace('%fieldNames%', hiddenFields.join(' '));
    }
  }

  return result;
}
/* eslint-disable no-param-reassign */

function preparePathsFilter(pathsFilter) {
  if (!pathsFilter) return null;
  if (Array.isArray(pathsFilter)) return pathsFilter;

  var tmp = pathsFilter.split(/\s|,/).filter(function (s) {
    return s !== '';
  });
  if (tmp.length > 0) return tmp;
  return null;
}

function hideComplexValue(val) {
  var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'was hidden';

  if (val === null || val === undefined) return val;
  var t = typeof val;
  if (t === 'boolean' || t === 'number') {
    return val;
  }
  if (t === 'string') {
    if (val.length < 500) {
      return val;
    }
    return `String(length:${val.length}) ${msg}`;
  }
  if (t === 'object' && val.constructor) {
    if (val.constructor.name === 'Array') {
      return `Array(length:${val.length}) ${msg}`;
    }
    if (val.constructor.name === 'Object') {
      return `Object {} ${msg}`;
    }
    return `Object(${val.constructor.name}) ${msg}`;
  }
  return t;
}

function isPresentInDotFilter(name, pathsFilter) {
  if (!pathsFilter) return false;
  if (Array.isArray(pathsFilter)) {
    for (var i = 0; i < pathsFilter.length; i++) {
      if (pathsFilter[i] === name || pathsFilter[i].indexOf(`${name}.`) === 0) return true;
    }
  } else {
    return pathsFilter === name || pathsFilter.indexOf(`${name}.`) === 0;
  }

  return false;
}

function partialCloneSubpath(res, path) {
  if (!res) return;

  var key = path.shift();
  var idx = parseInt(key, 10);
  key = idx >= 0 ? idx : key;

  if (!res[key]) return;

  if (Array.isArray(res[key])) {
    res[key] = res[key].slice(0); // clone array
    partialCloneSubpath(res[key], path);
  } else if (typeof res[key] === 'object') {
    res[key] = (0, _extends3.default)({}, res[key]); // clone object
    partialCloneSubpath(res[key], path);
  }
}

function hideField(result, key, msg, pathsFilter) {
  var hiddenFields = [];
  var wildcardMatch = key.match(/(.*)\.\*$/);
  if (wildcardMatch) {
    var k = wildcardMatch[1];
    partialCloneSubpath(result, k.split('.'));
    var res = _objectPath2.default.get(result, k, result[k]);

    if (res && typeof res === 'object') {
      Object.keys(res).forEach(function (kk) {
        if (res[kk] && !isPresentInDotFilter(`${k}.${kk}`, pathsFilter)) {
          var tmp = hideComplexValue(res[kk], msg ? msg.replace(new RegExp(`${k}.*`.replace(/([.*])/g, '\\$1'), 'g'), `${k}.${kk}`) : msg);
          if (tmp !== res[kk]) {
            res[kk] = tmp;
            hiddenFields.push(`${k}.${kk}`);
          }
        }
      });
      return hiddenFields;
    }
  }

  if (result[key] && !isPresentInDotFilter(key, pathsFilter)) {
    var tmp = hideComplexValue(result[key], msg);
    if (tmp !== result[key]) {
      result[key] = tmp;
      hiddenFields.push(key);
    }
  }

  return hiddenFields;
}