'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _graphql = require('./graphql');

var _typeMapper = require('./typeMapper');

var _typeMapper2 = _interopRequireDefault(_typeMapper);

var _typeComposer = require('./typeComposer');

var _typeComposer2 = _interopRequireDefault(_typeComposer);

var _deepmerge = require('./utils/deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _configAsThunk = require('./utils/configAsThunk');

var _misc = require('./utils/misc');

var _is = require('./utils/is');

var _filterByDotPaths = require('./utils/filterByDotPaths');

var _filterByDotPaths2 = _interopRequireDefault(_filterByDotPaths);

var _projection = require('./projection');

var _inputTypeComposer = require('./inputTypeComposer');

var _inputTypeComposer2 = _interopRequireDefault(_inputTypeComposer);

var _typeByPath = require('./typeByPath');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// export type ProjectionType = { [fieldName: string]: $Shape<ProjectionNode> | true };
// export type ProjectionNode = { [fieldName: string]: $Shape<ProjectionNode> } | true;

// import { deprecate } from './utils/debug';
var Resolver = function () {
  function Resolver(opts) {
    (0, _classCallCheck3.default)(this, Resolver);

    if (!opts.name) {
      throw new Error('For Resolver constructor the `opts.name` is required option.');
    }
    this.name = opts.name;
    this.displayName = opts.displayName || null;
    this.parent = opts.parent || null;
    this.kind = opts.kind || null;
    this.description = opts.description || '';

    if (opts.type) {
      this.setType(opts.type);
    }

    if (opts.args) {
      this.args = _typeMapper2.default.convertArgConfigMap(opts.args, this.name, 'Resolver');
    } else {
      this.args = {};
    }

    if (opts.resolve) {
      this.resolve = opts.resolve;
    }
  }

  (0, _createClass3.default)(Resolver, [{
    key: 'hasArg',
    value: function hasArg(argName) {
      return !!this.args[argName];
    }
  }, {
    key: 'getArg',
    value: function getArg(argName) {
      if (!this.hasArg(argName)) {
        throw new Error(`Cannot get arg '${argName}' for resolver ${this.name}. Argument does not exist.`);
      }

      return this.args[argName];
    }
  }, {
    key: 'getArgType',
    value: function getArgType(argName) {
      var arg = this.getArg(argName);
      return arg.type;
    }
  }, {
    key: 'getArgTC',
    value: function getArgTC(argName) {
      var argType = (0, _graphql.getNamedType)(this.getArgType(argName));
      if (!(argType instanceof _graphql.GraphQLInputObjectType)) {
        throw new Error(`Cannot get InputTypeComposer for arg '${argName}' in resolver ${this.getNestedName()}. ` + `This argument should be InputObjectType, but it has type '${argType.constructor.name}'`);
      }
      return new _inputTypeComposer2.default(argType);
    }
  }, {
    key: 'getArgs',
    value: function getArgs() {
      return this.args;
    }
  }, {
    key: 'getArgNames',
    value: function getArgNames() {
      return Object.keys(this.args);
    }
  }, {
    key: 'setArgs',
    value: function setArgs(args) {
      this.args = _typeMapper2.default.convertArgConfigMap(args, this.name, 'Resolver');
      return this;
    }
  }, {
    key: 'setArg',
    value: function setArg(argName, argConfig) {
      this.args[argName] = _typeMapper2.default.convertArgConfig(argConfig, argName, this.name, 'Resolver');
      return this;
    }
  }, {
    key: 'addArgs',
    value: function addArgs(newArgs) {
      this.setArgs((0, _extends3.default)({}, this.getArgs(), newArgs));
      return this;
    }
  }, {
    key: 'removeArg',
    value: function removeArg(argNameOrArray) {
      var _this = this;

      var argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
      argNames.forEach(function (argName) {
        delete _this.args[argName];
      });
      return this;
    }
  }, {
    key: 'removeOtherArgs',
    value: function removeOtherArgs(argNameOrArray) {
      var _this2 = this;

      var keepArgNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
      Object.keys(this.args).forEach(function (argName) {
        if (keepArgNames.indexOf(argName) === -1) {
          delete _this2.args[argName];
        }
      });
      return this;
    }
  }, {
    key: 'reorderArgs',
    value: function reorderArgs(names) {
      var _this3 = this;

      var orderedArgs = {};
      names.forEach(function (name) {
        if (_this3.args[name]) {
          orderedArgs[name] = _this3.args[name];
          delete _this3.args[name];
        }
      });
      this.args = (0, _extends3.default)({}, orderedArgs, this.args);
      return this;
    }
  }, {
    key: 'cloneArg',
    value: function cloneArg(argName, newTypeName) {
      if (!{}.hasOwnProperty.call(this.args, argName)) {
        throw new Error(`Can not clone arg ${argName} for resolver ${this.name}. Argument does not exist.`);
      }

      var originalType = this.args[argName].type;
      var isUnwrapped = false;
      if (originalType instanceof _graphql.GraphQLNonNull) {
        originalType = originalType.ofType;
        isUnwrapped = true;
      }

      if (!(originalType instanceof _graphql.GraphQLInputObjectType)) {
        throw new Error(`Can not clone arg ${argName} for resolver ${this.name}.` + 'Argument should be GraphQLInputObjectType (complex input type).');
      }
      if (!newTypeName || newTypeName !== (0, _misc.clearName)(newTypeName)) {
        throw new Error('You should provide new type name as second argument');
      }
      if (newTypeName === originalType.name) {
        throw new Error('You should provide new type name. It is equal to current name.');
      }

      var clonedType = _inputTypeComposer2.default.create(originalType).clone(newTypeName).getType();
      if (isUnwrapped) {
        clonedType = new _graphql.GraphQLNonNull(clonedType);
      }

      this.args[argName] = (0, _extends3.default)({}, this.args[argName], {
        type: clonedType
      });
      return this;
    }
  }, {
    key: 'isRequired',
    value: function isRequired(argName) {
      return this.getArgType(argName) instanceof _graphql.GraphQLNonNull;
    }
  }, {
    key: 'makeRequired',
    value: function makeRequired(argNameOrArray) {
      var _this4 = this;

      var argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
      argNames.forEach(function (argName) {
        if (_this4.args[argName]) {
          var argType = _this4.args[argName].type;
          if (!(0, _graphql.isInputType)(argType)) {
            throw new Error(`Cannot make argument ${argName} required. It should be InputType: ${JSON.stringify(argType)}`);
          }
          if (!(argType instanceof _graphql.GraphQLNonNull)) {
            _this4.args[argName].type = new _graphql.GraphQLNonNull(argType);
          }
        }
      });
      return this;
    }
  }, {
    key: 'makeOptional',
    value: function makeOptional(argNameOrArray) {
      var _this5 = this;

      var argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
      argNames.forEach(function (argName) {
        if (argNames.indexOf(argName) > -1) {
          var argType = _this5.args[argName].type;
          if (argType instanceof _graphql.GraphQLNonNull) {
            _this5.args[argName].type = argType.ofType;
          }
        }
      });
      return this;
    }

    /*
    * This method should be overriden via constructor
    */
    /* eslint-disable */

  }, {
    key: 'resolve',
    value: function resolve(resolveParams) {
      return Promise.resolve();
    }
    /* eslint-enable */

  }, {
    key: 'getResolve',
    value: function getResolve() {
      return this.resolve;
    }
  }, {
    key: 'setResolve',
    value: function setResolve(resolve) {
      this.resolve = resolve;
      return this;
    }
  }, {
    key: 'getType',
    value: function getType() {
      return this.type;
    }
  }, {
    key: 'getTypeComposer',
    value: function getTypeComposer() {
      if (this.type instanceof _graphql.GraphQLObjectType) {
        return new _typeComposer2.default(this.type);
      }
      return null;
    }
  }, {
    key: 'setType',
    value: function setType(gqType) {
      var fc = _typeMapper2.default.convertOutputFieldConfig(gqType, 'setType', 'Resolver');

      if (!fc || !(0, _graphql.isOutputType)(fc.type)) {
        throw new Error('You should provide correct OutputType for Resolver.type.');
      }
      this.type = fc.type;
      return this;
    }
  }, {
    key: 'getFieldConfig',
    value: function getFieldConfig() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var resolve = this.getResolve();
      return {
        type: this.getType(),
        args: (0, _configAsThunk.resolveInputConfigsAsThunk)(this.getArgs()),
        description: this.description,
        resolve: function (_resolve) {
          function resolve(_x2, _x3, _x4, _x5) {
            return _resolve.apply(this, arguments);
          }

          resolve.toString = function () {
            return _resolve.toString();
          };

          return resolve;
        }(function (source, args, context, info) {
          var projection = (0, _projection.getProjectionFromAST)(info);
          if (opts.projection) {
            projection = (0, _deepmerge2.default)(projection, opts.projection);
          }
          return resolve({ source, args, context, info, projection });
        })
      };
    }
  }, {
    key: 'getKind',
    value: function getKind() {
      return this.kind;
    }
  }, {
    key: 'setKind',
    value: function setKind(kind) {
      if (kind !== 'query' && kind !== 'mutation' && kind !== 'subscription') {
        throw new Error(`You provide incorrect value '${kind}' for Resolver.setKind method. ` + 'Valid values are: query | mutation | subscription');
      }
      this.kind = kind;
      return this;
    }
  }, {
    key: 'getDescription',
    value: function getDescription() {
      return this.description;
    }
  }, {
    key: 'setDescription',
    value: function setDescription(description) {
      this.description = description;
      return this;
    }
  }, {
    key: 'get',
    value: function get(path) {
      // $FlowFixMe
      return (0, _typeByPath.typeByPath)(this, path);
    }
  }, {
    key: 'clone',
    value: function clone() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var oldOpts = {};
      for (var key in this) {
        if ({}.hasOwnProperty.call(this, key)) {
          // $FlowFixMe
          oldOpts[key] = this[key];
        }
      }
      oldOpts.displayName = undefined;
      oldOpts.args = (0, _extends3.default)({}, this.args);
      return new Resolver((0, _extends3.default)({}, oldOpts, opts));
    }
  }, {
    key: 'wrap',
    value: function wrap(cb) {
      var newResolverOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var prevResolver = this;
      var newResolver = this.clone((0, _extends3.default)({
        name: 'wrap',
        parent: prevResolver
      }, newResolverOpts));

      if ((0, _is.isFunction)(cb)) {
        var resolver = cb(newResolver, prevResolver);
        if (resolver) return resolver;
      }

      return newResolver;
    }
  }, {
    key: 'wrapResolve',
    value: function wrapResolve(cb) {
      var wrapperName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'wrapResolve';

      return this.wrap(function (newResolver, prevResolver) {
        var newResolve = cb(prevResolver.getResolve());
        newResolver.setResolve(newResolve);
        return newResolver;
      }, { name: wrapperName });
    }
  }, {
    key: 'wrapArgs',
    value: function wrapArgs(cb) {
      var wrapperName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'wrapArgs';

      return this.wrap(function (newResolver, prevResolver) {
        // clone prevArgs, to avoid changing args in callback
        var prevArgs = (0, _extends3.default)({}, prevResolver.getArgs());
        var newArgs = cb(prevArgs);
        newResolver.setArgs(newArgs);
        return newResolver;
      }, { name: wrapperName });
    }
  }, {
    key: 'wrapCloneArg',
    value: function wrapCloneArg(argName, newTypeName) {
      return this.wrap(function (newResolver) {
        return newResolver.cloneArg(argName, newTypeName);
      }, {
        name: 'cloneFilterArg'
      });
    }
  }, {
    key: 'wrapType',
    value: function wrapType(cb) {
      var wrapperName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'wrapType';

      return this.wrap(function (newResolver, prevResolver) {
        var prevType = prevResolver.getType();
        var newType = cb(prevType);
        newResolver.setType(newType);
        return newResolver;
      }, { name: wrapperName });
    }
  }, {
    key: 'addFilterArg',
    value: function addFilterArg(opts) {
      if (!opts.name) {
        throw new Error('For Resolver.addFilterArg the arg name `opts.name` is required.');
      }

      if (!opts.type) {
        throw new Error('For Resolver.addFilterArg the arg type `opts.type` is required.');
      }

      var resolver = this.wrap(null, { name: 'addFilterArg' });

      // get filterTC or create new one argument
      var filter = resolver.hasArg('filter') ? resolver.getArg('filter') : undefined;
      var filterITC = void 0;
      if (filter && filter.type instanceof _graphql.GraphQLInputObjectType) {
        filterITC = new _inputTypeComposer2.default(filter.type);
      } else {
        if (!opts.filterTypeNameFallback || !(0, _is.isString)(opts.filterTypeNameFallback)) {
          throw new Error('For Resolver.addFilterArg needs to provide `opts.filterTypeNameFallback: string`. ' + 'This string will be used as unique name for `filter` type of input argument. ' + 'Eg. FilterXXXXXInput');
        }
        filterITC = _inputTypeComposer2.default.create(opts.filterTypeNameFallback);
      }

      var defaultValue = void 0;
      if (filter && filter.defaultValue) {
        defaultValue = filter.defaultValue;
      }
      if (opts.defaultValue) {
        if (!defaultValue) {
          defaultValue = {};
        }
        // $FlowFixMe
        defaultValue[opts.name] = opts.defaultValue;
      }

      resolver.setArg('filter', {
        type: filterITC.getType(),
        description: filter && filter.description || undefined,
        defaultValue
      });

      filterITC.setField(opts.name, (0, _extends3.default)({}, (0, _misc.only)(opts, ['name', 'type', 'defaultValue', 'description'])));

      var resolveNext = resolver.getResolve();
      if ((0, _is.isFunction)(opts.query)) {
        resolver.setResolve(function (resolveParams) {
          var value = _objectPath2.default.get(resolveParams, ['args', 'filter', opts.name]);
          if (value !== null && value !== undefined) {
            if (!resolveParams.rawQuery) {
              resolveParams.rawQuery = {}; // eslint-disable-line
            }
            opts.query(resolveParams.rawQuery, value, resolveParams);
          }
          return resolveNext(resolveParams);
        });
      }

      return resolver;
    }
  }, {
    key: 'addSortArg',
    value: function addSortArg(opts) {
      if (!opts.name) {
        throw new Error('For Resolver.addSortArg the `opts.name` is required.');
      }

      if (!opts.value) {
        throw new Error('For Resolver.addSortArg the `opts.value` is required.');
      }

      var resolver = this.wrap(null, { name: 'addSortArg' });

      // get sortEnumType or create new one
      var sortEnumType = void 0;
      if (resolver.hasArg('sort')) {
        var sort = resolver.getArg('sort');
        if (sort.type instanceof _graphql.GraphQLEnumType) {
          sortEnumType = sort.type;
        } else {
          throw new Error('Resolver should have `sort` arg with type GraphQLEnumType. ' + `But got: ${_util2.default.inspect(sort.type, { depth: 2 })} `);
        }
      } else {
        if (!opts.sortTypeNameFallback || !(0, _is.isString)(opts.sortTypeNameFallback)) {
          throw new Error('For Resolver.addSortArg needs to provide `opts.sortTypeNameFallback: string`. ' + 'This string will be used as unique name for `sort` type of input argument. ' + 'Eg. SortXXXXXEnum');
        }
        sortEnumType = new _graphql.GraphQLEnumType({
          name: opts.sortTypeNameFallback,
          values: {
            [opts.name]: {}
          }
        });
        resolver.setArg('sort', { type: sortEnumType });
      }

      // extend sortEnumType with new sorting value
      var existedIdx = sortEnumType._values.findIndex(function (o) {
        return o.name === opts.name;
      });
      if (existedIdx >= 0) {
        sortEnumType._values.splice(existedIdx, 1);
      }
      delete sortEnumType._nameLookup;
      delete sortEnumType._valueLookup;
      sortEnumType._values.push({
        name: opts.name,
        description: opts.description,
        isDeprecated: Boolean(opts.deprecationReason),
        deprecationReason: opts.deprecationReason,
        value: (0, _is.isFunction)(opts.value) ? opts.name : opts.value
      });

      // If sort value is evaluable (function), then wrap resolve method
      var resolveNext = resolver.getResolve();
      if ((0, _is.isFunction)(opts.value)) {
        resolver.setResolve(function (resolveParams) {
          var value = _objectPath2.default.get(resolveParams, ['args', 'sort']);
          if (value === opts.name) {
            // $FlowFixMe
            var newSortValue = opts.value(resolveParams);
            resolveParams.args.sort = newSortValue; // eslint-disable-line
          }
          return resolveNext(resolveParams);
        });
      }

      return resolver;
    }
  }, {
    key: 'getNestedName',
    value: function getNestedName() {
      var name = this.displayName || this.name;
      if (this.parent) {
        return `${name}(${this.parent.getNestedName()})`;
      }
      return name;
    }
  }, {
    key: 'toStringOld',
    value: function toStringOld() {
      function extendedInfo(resolver) {
        var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        return ['Resolver(', `  name: ${resolver.name},`, `  displayName: ${resolver.displayName || ''},`, `  type: ${_util2.default.inspect(resolver.type, { depth: 2 })},`, `  args: ${_util2.default.inspect(resolver.args, { depth: 3 }).replace('\n', `\n  ${spaces}`)},`, `  resolve: ${resolver.resolve ? resolver.resolve.toString().replace('\n', `\n  ${spaces}`) : 'undefined'},`, `  parent: ${resolver.parent ? extendedInfo(resolver.parent, `  ${spaces}`) : ''}`, ')'].filter(function (s) {
          return !!s;
        }).join(`\n  ${spaces}`);
      }
      return extendedInfo(this);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      return _util2.default.inspect(this.toDebugStructure(false), { depth: 20, colors }).replace(/\\n/g, '\n');
    }
  }, {
    key: 'setDisplayName',
    value: function setDisplayName(name) {
      this.displayName = name;
      return this;
    }
  }, {
    key: 'toDebugStructure',
    value: function toDebugStructure() {
      var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var info = {
        name: this.name,
        displayName: this.displayName,
        type: _util2.default.inspect(this.type, { depth: 2, colors }),
        args: this.args,
        resolve: this.resolve ? this.resolve.toString() : this.resolve
      };
      if (this.parent) {
        info.resolve = [info.resolve, { 'Parent resolver': this.parent.toDebugStructure(colors) }];
      }
      return info;
    }
  }, {
    key: 'debugExecTime',
    value: function debugExecTime() {
      var _this6 = this;

      /* eslint-disable no-console */
      return this.wrapResolve(function (next) {
        return function () {
          var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(rp) {
            var name, res;
            return _regenerator2.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    name = `Execution time for ${_this6.getNestedName()}`;

                    console.time(name);
                    _context.next = 4;
                    return next(rp);

                  case 4:
                    res = _context.sent;

                    console.timeEnd(name);
                    return _context.abrupt('return', res);

                  case 7:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, _this6);
          }));

          return function (_x14) {
            return _ref.apply(this, arguments);
          };
        }();
      }, 'debugExecTime');
      /* eslint-enable no-console */
    }
  }, {
    key: 'debugParams',
    value: function debugParams(filterPaths) {
      var _this7 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { colors: true, depth: 5 };

      /* eslint-disable no-console */
      return this.wrapResolve(function (next) {
        return function (rp) {
          console.log(`ResolveParams for ${_this7.getNestedName()}:`);
          var data = (0, _filterByDotPaths2.default)(rp, filterPaths, {
            // is hidden (use debugParams(["info"])) or debug({ params: ["info"]})
            // `is hidden (use debugParams(["context.*"])) or debug({ params: ["context.*"]})`,
            hideFields: rp && rp.context && rp.context.res && rp.context.params && rp.context.headers ? {
              // looks like context is express request, colapse it
              info: '[[hidden]]',
              context: '[[hidden]]'
            } : {
              info: '[[hidden]]',
              'context.*': '[[hidden]]'
            },
            hideFieldsNote: 'Some data was [[hidden]] to display this fields use debugParams("%fieldNames%")'
          });
          console.dir(data, opts);
          return next(rp);
        };
      }, 'debugParams');
      /* eslint-enable no-console */
    }
  }, {
    key: 'debugPayload',
    value: function debugPayload(filterPaths) {
      var _this8 = this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { colors: true, depth: 5 };

      /* eslint-disable no-console */
      return this.wrapResolve(function (next) {
        return function () {
          var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(rp) {
            var res;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;
                    _context2.next = 3;
                    return next(rp);

                  case 3:
                    res = _context2.sent;

                    console.log(`Resolved Payload for ${_this8.getNestedName()}:`);
                    if (Array.isArray(res) && res.length > 3 && !filterPaths) {
                      console.dir([filterPaths ? (0, _filterByDotPaths2.default)(res[0], filterPaths) : res[0], `[debug note]: Other ${res.length - 1} records was [[hidden]]. ` + 'Use debugPayload("0 1 2 3 4") or debug({ payload: "0 1 2 3 4" }) for display this records'], opts);
                    } else {
                      console.dir(filterPaths ? (0, _filterByDotPaths2.default)(res, filterPaths) : res, opts);
                    }
                    return _context2.abrupt('return', res);

                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2['catch'](0);

                    console.log(`Rejected Payload for ${_this8.getNestedName()}:`);
                    console.log(_context2.t0);
                    throw _context2.t0;

                  case 14:
                  case 'end':
                    return _context2.stop();
                }
              }
            }, _callee2, _this8, [[0, 9]]);
          }));

          return function (_x17) {
            return _ref2.apply(this, arguments);
          };
        }();
      }, 'debugPayload');
      /* eslint-enable no-console */
    }
  }, {
    key: 'debug',
    value: function debug(filterDotPaths) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { colors: true, depth: 2 };

      return this.debugExecTime().debugParams(filterDotPaths ? filterDotPaths.params : null, opts).debugPayload(filterDotPaths ? filterDotPaths.payload : null, opts);
    }
  }]);
  return Resolver;
}();
/* eslint-disable no-use-before-define, no-restricted-syntax */

exports.default = Resolver;