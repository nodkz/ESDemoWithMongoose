'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _graphql = require('./graphql');

var _debug = require('./utils/debug');

var _typeComposer = require('./typeComposer');

var _typeComposer2 = _interopRequireDefault(_typeComposer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ComposeStorage = function () {
  function ComposeStorage() {
    (0, _classCallCheck3.default)(this, ComposeStorage);

    this.types = {};
  }

  (0, _createClass3.default)(ComposeStorage, [{
    key: 'has',
    value: function has(typeName) {
      return !!this.types[typeName];
    }
  }, {
    key: 'add',
    value: function add(typeComposer) {
      if (!(typeComposer instanceof _typeComposer2.default)) {
        throw new Error('You must provide instance of TypeComposer');
      }

      this.types[typeComposer.getTypeName()] = typeComposer;
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.types = {};
    }
  }, {
    key: 'get',
    value: function get(typeName) {
      if (!this.has(typeName)) {
        this.types[typeName] = _typeComposer2.default.create(typeName);
      }
      return this.types[typeName];
    }
  }, {
    key: 'rootQuery',
    value: function rootQuery() {
      return this.get('Query');
    }
  }, {
    key: 'rootMutation',
    value: function rootMutation() {
      return this.get('Mutation');
    }
  }, {
    key: 'rootSubscription',
    value: function rootSubscription() {
      return this.get('Subscription');
    }
  }, {
    key: 'resolvers',
    value: function resolvers(typeName) {
      return this.get(typeName).getResolvers();
    }
  }, {
    key: 'resolver',
    value: function resolver(typeName, resolverName) {
      return this.get(typeName).getResolver(resolverName);
    }
  }, {
    key: 'buildSchema',
    value: function buildSchema() {
      var roots = {};

      if (this.has('Query')) {
        var tc = this.get('Query');
        this.removeEmptyTypes(tc, new Set());
        roots.query = tc.getType();
      }

      if (this.has('Mutation')) {
        var _tc = this.get('Mutation');
        this.removeEmptyTypes(_tc, new Set());
        roots.mutation = _tc.getType();
      }

      if (this.has('Subscription')) {
        var _tc2 = this.get('Subscription');
        this.removeEmptyTypes(_tc2, new Set());
        roots.subscription = _tc2.getType();
      }

      if (Object.keys(roots).length === 0) {
        throw new Error('Can not build schema. Must be initialized at least one ' + 'of the following types: Query, Mutation, Subscription.');
      }

      return new _graphql.GraphQLSchema(roots);
    }

    /**
    * @deprecated 3.0.0
    */

  }, {
    key: 'buildRelations',
    value: function buildRelations() {
      (0, _debug.deprecate)('No need in calling buildRelations() any more. You may safely remove call of this method.');
      return this;
    }
  }, {
    key: 'removeEmptyTypes',
    value: function removeEmptyTypes(typeComposer) {
      var _this = this;

      var passedTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();

      var fields = typeComposer.getFields();
      Object.keys(fields).forEach(function (fieldName) {
        var fieldType = fields[fieldName].type;
        if (fieldType instanceof _graphql.GraphQLObjectType) {
          var _typeName = fieldType.name;
          if (!passedTypes.has(_typeName)) {
            passedTypes.add(_typeName);
            var tc = new _typeComposer2.default(fieldType);
            if (Object.keys(tc.getFields()).length > 0) {
              _this.removeEmptyTypes(tc, passedTypes);
            } else {
              // eslint-disable-next-line
              console.log(`GQC: Delete field '${typeComposer.getTypeName()}.${fieldName}' ` + `with type '${tc.getTypeName()}', cause it does not have fields.`);
              delete fields[fieldName];
            }
          }
        }
      });
      typeComposer.setFields(fields);
    }
  }]);
  return ComposeStorage;
}();

exports.default = ComposeStorage;