'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.getProjectionFromAST = getProjectionFromAST;
exports.getFlatProjectionFromAST = getFlatProjectionFromAST;

var _kinds = require('graphql/language/kinds');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getProjectionFromAST(context, fieldNode) {
  if (!context) {
    return {};
  }

  var selections = void 0; // Array<FieldNode | InlineFragmentNode | FragmentSpreadNode>;
  if (fieldNode) {
    if (fieldNode.selectionSet) {
      selections = fieldNode.selectionSet.selections;
    }
  } else if (Array.isArray(context.fieldNodes)) {
    // get all selectionSets
    selections = context.fieldNodes.reduce(function (result, source) {
      if (source.selectionSet) {
        result.push.apply(result, (0, _toConsumableArray3.default)(source.selectionSet.selections));
      }
      return result;
    }, []);
  }

  var projection = (selections || []).reduce(function (list, ast) {
    switch (ast.kind) {
      case _kinds.FIELD:
        list[ast.name.value] = getProjectionFromAST(context, ast) || true;
        return list;
      case _kinds.INLINE_FRAGMENT:
        return (0, _extends3.default)({}, list, getProjectionFromAST(context, ast));
      case _kinds.FRAGMENT_SPREAD:
        return (0, _extends3.default)({}, list, getProjectionFromAST(context, context.fragments[ast.name.value]));
      default:
        throw new Error('Unsuported query selection');
    }
  }, {});

  // this type params are setup via TypeComposer.addProjectionMapper()
  // Sometimes, when you create relations you need query additional fields, that not in query.
  // Eg. for obtaining `friendList` you also should add `friendIds` to projection.
  if (projection && context.returnType) {
    var returnType = context.returnType;
    while (returnType.ofType) {
      returnType = returnType.ofType;
    }

    // $FlowFixMe
    var mapper = returnType._gqcProjectionMapper;
    if (mapper && typeof mapper === 'object') {
      Object.keys(mapper).forEach(function (key) {
        if (projection[key]) {
          Object.assign(projection, mapper[key]);
        }
      });
    }
  }
  return projection;
}
/* eslint-disable no-param-reassign, no-lonely-if */

function getFlatProjectionFromAST(context, fieldNodes) {
  var projection = getProjectionFromAST(context, fieldNodes) || {};
  var flatProjection = {};
  Object.keys(projection).forEach(function (key) {
    flatProjection[key] = !!projection[key];
  });
  return flatProjection;
}