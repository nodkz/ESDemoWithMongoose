'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = preparePaginationType;

var _graphqlCompose = require('graphql-compose');

var _paginationInfoType = require('./paginationInfoType');

var _paginationInfoType2 = _interopRequireDefault(_paginationInfoType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable arrow-body-style */

var GraphQLInt = _graphqlCompose.graphql.GraphQLInt,
    GraphQLObjectType = _graphqlCompose.graphql.GraphQLObjectType,
    GraphQLNonNull = _graphqlCompose.graphql.GraphQLNonNull,
    GraphQLList = _graphqlCompose.graphql.GraphQLList;


var cachedPaginationTypes = new WeakMap();

function preparePaginationType(typeComposer) {
  var name = `${typeComposer.getTypeName()}Pagination`;
  var type = typeComposer.getType();

  if (cachedPaginationTypes.has(type)) {
    return cachedPaginationTypes.get(type);
  }

  var paginationType = new GraphQLObjectType({
    name,
    description: 'List of items with pagination.',
    fields: function fields() {
      return {
        count: {
          type: GraphQLInt,
          description: 'Total object count.'
        },
        items: {
          type: new GraphQLList(typeComposer.getType()),
          description: 'Array of objects.'
        },
        pageInfo: {
          type: new GraphQLNonNull(_paginationInfoType2.default),
          description: 'Information to aid in pagination.'
        }
      };
    }
  });

  // This is small HACK for providing to graphql-compose/src/projection.js
  // information about required fields in projection and relations
  // $FlowFixMe
  paginationType.ofType = type;

  cachedPaginationTypes.set(type, paginationType);
  return paginationType;
}