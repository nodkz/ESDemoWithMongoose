'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareEdgeType = prepareEdgeType;
exports.prepareConnectionType = prepareConnectionType;

var _graphql = require('graphql-compose/lib/graphql');

var _pageInfoType = require('./pageInfoType');

var _pageInfoType2 = _interopRequireDefault(_pageInfoType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable arrow-body-style */

var cachedConnectionTypes = new WeakMap();
var cachedEdgeTypes = new WeakMap();

function prepareEdgeType(typeComposer) {
  var name = `${typeComposer.getTypeName()}Edge`;
  var type = typeComposer.getType();

  if (cachedEdgeTypes.has(type)) {
    return cachedEdgeTypes.get(type);
  }

  var edgeType = new _graphql.GraphQLObjectType({
    name,
    description: 'An edge in a connection.',
    fields: function fields() {
      return {
        node: {
          type: new _graphql.GraphQLNonNull(typeComposer.getType()),
          description: 'The item at the end of the edge'
        },
        cursor: {
          type: new _graphql.GraphQLNonNull(_graphql.GraphQLString),
          description: 'A cursor for use in pagination'
        }
      };
    }
  });

  // This is small HACK for providing to graphql-compose/src/projection.js
  // information about required fields in projection and relations
  // $FlowFixMe
  edgeType.ofType = type;

  cachedEdgeTypes.set(type, edgeType);
  return edgeType;
}

function prepareConnectionType(typeComposer) {
  var name = `${typeComposer.getTypeName()}Connection`;
  var type = typeComposer.getType();

  if (cachedConnectionTypes.has(type)) {
    return cachedConnectionTypes.get(type);
  }

  var connectionType = new _graphql.GraphQLObjectType({
    name,
    description: 'A connection to a list of items.',
    fields: function fields() {
      return {
        count: {
          type: new _graphql.GraphQLNonNull(_graphql.GraphQLInt),
          description: 'Total object count.'
        },
        pageInfo: {
          type: new _graphql.GraphQLNonNull(_pageInfoType2.default),
          description: 'Information to aid in pagination.'
        },
        edges: {
          type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(new _graphql.GraphQLNonNull(prepareEdgeType(typeComposer)))),
          description: 'Information to aid in pagination.'
        }
      };
    }
  });

  // This is small HACK for providing to graphql-compose/src/projection.js
  // information about required fields in projection and relations
  // $FlowFixMe
  connectionType.ofType = type;

  cachedConnectionTypes.set(type, connectionType);
  return connectionType;
}